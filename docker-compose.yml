version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: natacao_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-natacao_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-natacao_password}
      POSTGRES_DB: ${POSTGRES_DB:-natacao_db}
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-natacao_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - natacao_network

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: natacao_backend
    restart: unless-stopped
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://natacao_user:natacao_password@postgres:5432/natacao_db}
      EVOLUTION_API_URL: ${EVOLUTION_API_URL:-}
      EVOLUTION_API_KEY: ${EVOLUTION_API_KEY:-}
      EVOLUTION_INSTANCE_NAME: ${EVOLUTION_INSTANCE_NAME:-}
    ports:
      - "9000:9000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 9000 --reload
    networks:
      - natacao_network

  # Frontend (Streamlit)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: natacao_frontend
    restart: unless-stopped
    environment:
      API_URL: http://backend:9000
    ports:
      - "8501:8501"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
    command: streamlit run streamlit_app.py --server.port=8501 --server.address=0.0.0.0
    networks:
      - natacao_network

volumes:
  postgres_data:
    driver: local

networks:
  natacao_network:
    driver: bridge
