name: Tests Enterprise CI/CD
# Enterprise-grade CI/CD - Superior aos top 10 players

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Executar testes diariamente às 3h AM UTC
    - cron: '0 3 * * *'

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.0'

jobs:
  # ========================================================================
  # LINT E CODE QUALITY
  # ========================================================================
  lint:
    name: Lint & Code Quality
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd backend
          pip install black isort flake8 mypy pylint bandit

      - name: Black (Code Formatting)
        run: |
          cd backend
          black --check app tests

      - name: isort (Import Sorting)
        run: |
          cd backend
          isort --check-only app tests

      - name: Flake8 (Style Guide)
        run: |
          cd backend
          flake8 app tests --max-line-length=120 --extend-ignore=E203,W503

      - name: MyPy (Type Checking)
        run: |
          cd backend
          mypy app --ignore-missing-imports

      - name: Bandit (Security Linting)
        run: |
          cd backend
          bandit -r app -ll

  # ========================================================================
  # TESTES UNITÁRIOS (RÁPIDOS)
  # ========================================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist pytest-timeout pytest-randomly

      - name: Run Unit Tests
        run: |
          cd backend
          pytest tests/unit -v -m unit --cov=app --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.xml
          flags: unittests
          name: unit-tests-coverage

  # ========================================================================
  # TESTES DE INTEGRAÇÃO
  # ========================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist

      - name: Run Integration Tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        run: |
          cd backend
          pytest tests/integration -v -m integration --cov=app --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.xml
          flags: integration
          name: integration-tests-coverage

  # ========================================================================
  # TESTES DE SEGURANÇA
  # ========================================================================
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest safety

      - name: Run Security Tests
        run: |
          cd backend
          pytest tests/security -v -m security

      - name: Safety Check (Vulnerabilities)
        run: |
          cd backend
          safety check --json || true

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'natacao-manager'
          path: '.'
          format: 'HTML'

  # ========================================================================
  # TESTES DE PERFORMANCE
  # ========================================================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-benchmark

      - name: Run Performance Tests
        run: |
          cd backend
          pytest tests/performance -v -m performance --benchmark-only

  # ========================================================================
  # TESTES E2E
  # ========================================================================
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest

      - name: Run E2E Tests
        run: |
          cd backend
          pytest tests/e2e -v -m e2e

  # ========================================================================
  # SMOKE TESTS (CRÍTICOS)
  # ========================================================================
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest

      - name: Run Smoke Tests
        run: |
          cd backend
          pytest tests/e2e -v -m smoke

  # ========================================================================
  # BUILD E DEPLOY (apenas em main)
  # ========================================================================
  build:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-tests, e2e-tests]
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Build Docker Image
        run: |
          docker-compose build

      - name: Run smoke tests on built image
        run: |
          docker-compose up -d
          sleep 10
          curl --fail http://localhost:9000/health || exit 1
          docker-compose down

      - name: Deploy to Production
        if: success()
        run: |
          echo "Deploy to production would happen here"
          # Add your deployment logic

  # ========================================================================
  # RELATÓRIO DE COBERTURA CONSOLIDADO
  # ========================================================================
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]

    steps:
      - uses: actions/checkout@v4

      - name: Download coverage artifacts
        uses: actions/download-artifact@v3

      - name: Generate consolidated report
        run: |
          echo "Coverage report would be generated here"

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}
